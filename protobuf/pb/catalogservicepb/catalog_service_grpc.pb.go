// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: catalog_service.proto

package catalogservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogServiceGRPC_GetAllProducts_FullMethodName                    = "/catalogservice.CatalogServiceGRPC/GetAllProducts"
	CatalogServiceGRPC_GetProductById_FullMethodName                    = "/catalogservice.CatalogServiceGRPC/GetProductById"
	CatalogServiceGRPC_GetProductsByListId_FullMethodName               = "/catalogservice.CatalogServiceGRPC/GetProductsByListId"
	CatalogServiceGRPC_UpdateProductsByListInvoiceDetail_FullMethodName = "/catalogservice.CatalogServiceGRPC/UpdateProductsByListInvoiceDetail"
)

// CatalogServiceGRPCClient is the client API for CatalogServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceGRPCClient interface {
	GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
	GetProductsByListId(ctx context.Context, in *GetProductsByListIdRequest, opts ...grpc.CallOption) (*GetProductsByListIdResponse, error)
	UpdateProductsByListInvoiceDetail(ctx context.Context, in *UpdateProductsByListInvoiceDetailRequest, opts ...grpc.CallOption) (*UpdateProductsByListInvoiceDetailResponse, error)
}

type catalogServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceGRPCClient(cc grpc.ClientConnInterface) CatalogServiceGRPCClient {
	return &catalogServiceGRPCClient{cc}
}

func (c *catalogServiceGRPCClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, CatalogServiceGRPC_GetAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceGRPCClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductByIdResponse)
	err := c.cc.Invoke(ctx, CatalogServiceGRPC_GetProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceGRPCClient) GetProductsByListId(ctx context.Context, in *GetProductsByListIdRequest, opts ...grpc.CallOption) (*GetProductsByListIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsByListIdResponse)
	err := c.cc.Invoke(ctx, CatalogServiceGRPC_GetProductsByListId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceGRPCClient) UpdateProductsByListInvoiceDetail(ctx context.Context, in *UpdateProductsByListInvoiceDetailRequest, opts ...grpc.CallOption) (*UpdateProductsByListInvoiceDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductsByListInvoiceDetailResponse)
	err := c.cc.Invoke(ctx, CatalogServiceGRPC_UpdateProductsByListInvoiceDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceGRPCServer is the server API for CatalogServiceGRPC service.
// All implementations must embed UnimplementedCatalogServiceGRPCServer
// for forward compatibility.
type CatalogServiceGRPCServer interface {
	GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error)
	GetProductsByListId(context.Context, *GetProductsByListIdRequest) (*GetProductsByListIdResponse, error)
	UpdateProductsByListInvoiceDetail(context.Context, *UpdateProductsByListInvoiceDetailRequest) (*UpdateProductsByListInvoiceDetailResponse, error)
	mustEmbedUnimplementedCatalogServiceGRPCServer()
}

// UnimplementedCatalogServiceGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogServiceGRPCServer struct{}

func (UnimplementedCatalogServiceGRPCServer) GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedCatalogServiceGRPCServer) GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedCatalogServiceGRPCServer) GetProductsByListId(context.Context, *GetProductsByListIdRequest) (*GetProductsByListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByListId not implemented")
}
func (UnimplementedCatalogServiceGRPCServer) UpdateProductsByListInvoiceDetail(context.Context, *UpdateProductsByListInvoiceDetailRequest) (*UpdateProductsByListInvoiceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductsByListInvoiceDetail not implemented")
}
func (UnimplementedCatalogServiceGRPCServer) mustEmbedUnimplementedCatalogServiceGRPCServer() {}
func (UnimplementedCatalogServiceGRPCServer) testEmbeddedByValue()                            {}

// UnsafeCatalogServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceGRPCServer will
// result in compilation errors.
type UnsafeCatalogServiceGRPCServer interface {
	mustEmbedUnimplementedCatalogServiceGRPCServer()
}

func RegisterCatalogServiceGRPCServer(s grpc.ServiceRegistrar, srv CatalogServiceGRPCServer) {
	// If the following call pancis, it indicates UnimplementedCatalogServiceGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogServiceGRPC_ServiceDesc, srv)
}

func _CatalogServiceGRPC_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceGRPCServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogServiceGRPC_GetAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceGRPCServer).GetAllProducts(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogServiceGRPC_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceGRPCServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogServiceGRPC_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceGRPCServer).GetProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogServiceGRPC_GetProductsByListId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByListIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceGRPCServer).GetProductsByListId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogServiceGRPC_GetProductsByListId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceGRPCServer).GetProductsByListId(ctx, req.(*GetProductsByListIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogServiceGRPC_UpdateProductsByListInvoiceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductsByListInvoiceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceGRPCServer).UpdateProductsByListInvoiceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogServiceGRPC_UpdateProductsByListInvoiceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceGRPCServer).UpdateProductsByListInvoiceDetail(ctx, req.(*UpdateProductsByListInvoiceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogServiceGRPC_ServiceDesc is the grpc.ServiceDesc for CatalogServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalogservice.CatalogServiceGRPC",
	HandlerType: (*CatalogServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProducts",
			Handler:    _CatalogServiceGRPC_GetAllProducts_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _CatalogServiceGRPC_GetProductById_Handler,
		},
		{
			MethodName: "GetProductsByListId",
			Handler:    _CatalogServiceGRPC_GetProductsByListId_Handler,
		},
		{
			MethodName: "UpdateProductsByListInvoiceDetail",
			Handler:    _CatalogServiceGRPC_UpdateProductsByListInvoiceDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog_service.proto",
}
