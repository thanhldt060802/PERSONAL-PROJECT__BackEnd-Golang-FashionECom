// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: elasticsearch_service.proto

package elasticsearchservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElasticsearchServiceGRPC_GetUsers_FullMethodName    = "/elasticsearchservicepb.ElasticsearchServiceGRPC/GetUsers"
	ElasticsearchServiceGRPC_GetProducts_FullMethodName = "/elasticsearchservicepb.ElasticsearchServiceGRPC/GetProducts"
	ElasticsearchServiceGRPC_GetInvoices_FullMethodName = "/elasticsearchservicepb.ElasticsearchServiceGRPC/GetInvoices"
)

// ElasticsearchServiceGRPCClient is the client API for ElasticsearchServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElasticsearchServiceGRPCClient interface {
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error)
}

type elasticsearchServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewElasticsearchServiceGRPCClient(cc grpc.ClientConnInterface) ElasticsearchServiceGRPCClient {
	return &elasticsearchServiceGRPCClient{cc}
}

func (c *elasticsearchServiceGRPCClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, ElasticsearchServiceGRPC_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchServiceGRPCClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, ElasticsearchServiceGRPC_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchServiceGRPCClient) GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoicesResponse)
	err := c.cc.Invoke(ctx, ElasticsearchServiceGRPC_GetInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElasticsearchServiceGRPCServer is the server API for ElasticsearchServiceGRPC service.
// All implementations must embed UnimplementedElasticsearchServiceGRPCServer
// for forward compatibility.
type ElasticsearchServiceGRPCServer interface {
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error)
	mustEmbedUnimplementedElasticsearchServiceGRPCServer()
}

// UnimplementedElasticsearchServiceGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElasticsearchServiceGRPCServer struct{}

func (UnimplementedElasticsearchServiceGRPCServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedElasticsearchServiceGRPCServer) GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedElasticsearchServiceGRPCServer) GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedElasticsearchServiceGRPCServer) mustEmbedUnimplementedElasticsearchServiceGRPCServer() {
}
func (UnimplementedElasticsearchServiceGRPCServer) testEmbeddedByValue() {}

// UnsafeElasticsearchServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElasticsearchServiceGRPCServer will
// result in compilation errors.
type UnsafeElasticsearchServiceGRPCServer interface {
	mustEmbedUnimplementedElasticsearchServiceGRPCServer()
}

func RegisterElasticsearchServiceGRPCServer(s grpc.ServiceRegistrar, srv ElasticsearchServiceGRPCServer) {
	// If the following call pancis, it indicates UnimplementedElasticsearchServiceGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElasticsearchServiceGRPC_ServiceDesc, srv)
}

func _ElasticsearchServiceGRPC_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticsearchServiceGRPCServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticsearchServiceGRPC_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticsearchServiceGRPCServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticsearchServiceGRPC_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticsearchServiceGRPCServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticsearchServiceGRPC_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticsearchServiceGRPCServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticsearchServiceGRPC_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticsearchServiceGRPCServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticsearchServiceGRPC_GetInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticsearchServiceGRPCServer).GetInvoices(ctx, req.(*GetInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElasticsearchServiceGRPC_ServiceDesc is the grpc.ServiceDesc for ElasticsearchServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElasticsearchServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elasticsearchservicepb.ElasticsearchServiceGRPC",
	HandlerType: (*ElasticsearchServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _ElasticsearchServiceGRPC_GetUsers_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _ElasticsearchServiceGRPC_GetProducts_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _ElasticsearchServiceGRPC_GetInvoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elasticsearch_service.proto",
}
